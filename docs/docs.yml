info:
  description: API documentation for auth and menu-admin-endpoints
  title: Airbean API
  version: 1.0.0
openapi: 3.0.1

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginInput:
      description: Login Input
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: username123
        password:
          type: string
          example: password123

    RegisterInput:
      description: Register Input
      type: object
      required:
        - username
        - password
        - role
      properties:
        username:
          type: string
          example: username123
        password:
          type: string
          example: password123
        role:
          type: string
          enum: [admin, user]

    LoginResult:
      description: Login Result
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: User logged in successfully
        token:
          type: string
          example: Bearer eyJhbGciOkeJIUzI1NiI...

    RegisterResult:
      description: Register Result
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: User created successfully
        userId:
          type: string
          example: user-xxxxx

    Product:
      description: Post new product
      type: object
      required:
        - title
        - desc
        - price
      properties:
        title:
          type: string
          example: Coffee
        desc:
          type: string
          example: Coffee description
        price:
          type: number
          example: 50

    ProductUpdate:
      description: Update product
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Product updated successfully
        updatedProduct:
          type: object
          properties:
            prodId:
              type: string
              example: prod-xxxxx
            title:
              type: string
              example: updatedCoffee
            desc:
              type: string
              example: updatedCoffeeDesc
            price:
              type: number
              example: 10
            createdAt:
              type: string
              format: date-time
              example: 2025-06-11T08:56:21.000Z
            updatedAt:
              type: string
              format: date-time
              example: 2025-06-11T08:58:39.207Z

    ProductAdded:
      description: Product added successfully message
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: New product added successfully
        newProduct:
          type: object
          properties:
            prodId:
              type: string
              example: prod-xxxxx
            title:
              type: string
              example: newCoffee
            desc:
              type: string
              example: newCoffeeDesc
            price:
              type: number
              example: 10
            createdAt:
              type: string
              format: date-time
              example: 2025-06-11T08:56:21.000Z
            updatedAt:
              type: string
              format: date-time
              example: 2025-06-11T08:58:39.207Z

    ProductDeleted:
      description: Product deleted successfully message
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Product deleted successfully
        deletedProduct:
          type: object
          properties:
            prodId:
              type: string
              example: prod-xxxxx
            title:
              type: string
              example: deletedCoffee
            desc:
              type: string
              example: deletedCoffeeDesc
            price:
              type: number
              example: 10
            createdAt:
              type: string
              format: date-time
              example: 2025-06-11T08:56:21.000Z
            updatedAt:
              type: string
              format: date-time
              example: 2025-06-11T08:58:39.207Z

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: 400
              message:
                type: string
                example: Missing title or price

    Unauthorized:
      description: No or invalid token
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: 401
              message:
                type: string
                example: No token provided

    Forbidden:
      description: Admins only
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: 403
              message:
                type: string
                example: Admins only.

    NotFound:
      description: Product not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: 404
              message:
                type: string
                example: Product not found

paths:
  /api/auth/register:
    post:
      summary: Register a new user
      description: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInput'
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResult'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/auth/login:
    post:
      summary: Login and get token
      description: Login and get token
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: Login ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResult'
        '400':
          $ref: '#/components/responses/BadRequest'
    
  /api/auth/logout:
    get:
      summary: Log out the user
      description: Logs out by instructing the user to remove token.
      tags:
        - Auth
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User logged out successfully. Please remove token.

  /api/menu:
    post:
      summary: Add new product (admin only)
      description: Add new product (admin only)
      tags:
        - Menu
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductAdded'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/menu/{prodId}:
    put:
      summary: Update a product (admin only)
      description: Update a product (admin only)
      tags:
        - Menu
      security:
        - bearerAuth: []
      parameters:
        - name: prodId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductUpdate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete a product (admin only)
      description: Delete a product (admin only)
      tags:
        - Menu
      security:
        - bearerAuth: []
      parameters:
        - name: prodId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDeleted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
